Description: fixes issue 467
 Adds support for old-style $display
 .
 verilator (3.877-1connectal1) trusty; urgency=medium
 .
   * Fixes issue 467, adding more old-style $display options
Author: Jamey Hicks <jamey.hicks@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- verilator-3.877.orig/src/V3LinkResolve.cpp
+++ verilator-3.877/src/V3LinkResolve.cpp
@@ -251,7 +251,7 @@ private:
 	}
     }
 
-    void expectFormat(AstNode* nodep, const string& format, AstNode* argp, bool isScan) {
+    void expectFormat(AstNode* nodep, const string& format, AstNode* argp, bool isScan, string *newFormatp = 0) {
 	// Check display arguments
 	bool inPct = false;
 	for (string::const_iterator it = format.begin(); it != format.end(); ++it) {
@@ -285,12 +285,76 @@ private:
 	    }
 	}
 	if (argp) {
+	    string newFormat(format);
+	    int skipCount = 0;
+	    while (argp) {
+		cerr << "argp: " << argp << endl;
+		cerr << argp->fileline() << endl;
+		cerr << "argp->dtype(): " << argp->dtypep() << endl;
+		if (skipCount--) {
+		    argp = argp->nextp();
+		    cerr << "skipping" << endl;
+		    continue;
+		}
+		int isFromString = 0;
+		AstConst *constp = argp->castConst();
+		if (constp) {
+		    //cerr << "number: " << constp->num() << " fromString: " << constp->num().isFromString() << endl;
+		    isFromString = constp->num().isFromString();
+		}
+		if (isFromString) {
+		    int numchars = argp->dtypep()->width()/8;
+		    string str(numchars, ' ');
+		    for (int i = 0; i < numchars; i += 4) {
+			uint32_t dataword = constp->num().dataWord(i/4);
+			for (int j = 0; (j < 4) && (i+j) < numchars; j++) {
+			    unsigned char c = dataword & 0xFF;
+			    fprintf(stderr, "i=%d j=%d c=%d:%c\n", i, j, c, c);
+			    str[numchars-i-j-1] = c;
+			    dataword = dataword >> 8;
+			}
+		    }
+		    // now scan for % operators
+		    int inpercent = 0;
+		    for (int i = 0; i < numchars; i += 4) {
+			char c = str[i];
+			if (!inpercent && c == '%') {
+			    inpercent = 1;
+			} else if (inpercent) {
+			    inpercent = 0;
+			    switch (c) {
+			    case '0': case '1': case '2': case '3': case '4':
+			    case '5': case '6': case '7': case '8': case '9':
+			    case '.':
+				inpercent = 1;
+				break;
+			    case '%':
+				break;
+			    default:
+				if (V3Number::displayedFmtLegal(c))
+				    skipCount++;
+			    }
+			}
+		    }
+		    newFormat.append(str);
+		    argp->unlinkFrBack(); //FIXME: pushDeletep(nodep); VL_DANGLING(nodep);
+		} else {
+		    newFormat.append(", %h");
+		}
+		cerr << "newFormat: \"" << newFormat << endl;
+		argp = argp->nextp();
+	    }
+	    if (newFormatp)
+		*newFormatp = newFormat;
+	}
+	if (argp) {
 	    argp->v3error("Extra arguments for $display-like format");
 	}
     }
 
     void expectDescriptor(AstNode* nodep, AstNodeVarRef* filep) {
-	if (!filep) nodep->v3error("Unsupported: $fopen/$fclose/$f* descriptor must be a simple variable");
+	if (!filep) //nodep->v3error("Unsupported: $fopen/$fclose/$f* descriptor must be a simple variable");
+	    cerr << nodep->fileline() << "Expected: $fopen/$fclose/$f* descriptor must be a simple variable" << endl;
 	if (filep && filep->varp()) filep->varp()->attrFileDescr(true);
     }
 
@@ -331,7 +395,10 @@ private:
     }
     virtual void visit(AstSFormatF* nodep, AstNUser*) {
 	nodep->iterateChildren(*this);
-	expectFormat(nodep, nodep->text(), nodep->exprsp(), false);
+	string newFormat;
+	expectFormat(nodep, nodep->text(), nodep->exprsp(), false, &newFormat);
+	if (newFormat.size())
+	    nodep->text(newFormat);
 	if ((nodep->backp()->castDisplay() && nodep->backp()->castDisplay()->displayType().needScopeTracking())
 	    || nodep->formatScopeTracking()) {
 	    nodep->scopeNamep(new AstScopeName(nodep->fileline()));
--- verilator-3.877.orig/src/verilog.y
+++ verilator-3.877/src/verilog.y
@@ -2574,9 +2574,9 @@ system_t_call<nodep>:		// IEEE: system_t
 	|	yaD_DPI '(' exprList ')'		{ $$ = new AstTaskRef($2,*$1,$3); GRAMMARP->argWrapList($$->castTaskRef()); }
 	//
 	|	yD_C '(' cStrList ')'			{ $$ = (v3Global.opt.ignc() ? NULL : new AstUCStmt($1,$3)); }
-	|	yD_FCLOSE '(' idClassSel ')'		{ $$ = new AstFClose($1, $3); }
+	|	yD_FCLOSE '(' expr ')'			{ $$ = new AstFClose($1, $3); }
 	|	yD_FFLUSH parenE			{ $1->v3error("Unsupported: $fflush of all handles does not map to C++."); }
-	|	yD_FFLUSH '(' idClassSel ')'		{ $$ = new AstFFlush($1, $3); }
+	|	yD_FFLUSH '(' expr ')'			{ $$ = new AstFFlush($1, $3); }
 	|	yD_FINISH parenE			{ $$ = new AstFinish($1); }
 	|	yD_FINISH '(' expr ')'			{ $$ = new AstFinish($1); DEL($3); }
 	|	yD_STOP parenE				{ $$ = new AstStop($1); }
@@ -2590,9 +2590,9 @@ system_t_call<nodep>:		// IEEE: system_t
 	|	yD_DISPLAY  '(' str commaEListE ')'			{ $$ = new AstDisplay($1,AstDisplayType::DT_DISPLAY,*$3,NULL,$4); }
 	|	yD_WRITE    parenE					{ $$ = NULL; } // NOP
 	|	yD_WRITE    '(' str commaEListE ')'			{ $$ = new AstDisplay($1,AstDisplayType::DT_WRITE,  *$3,NULL,$4); }
-	|	yD_FDISPLAY '(' idClassSel ')'			 	{ $$ = new AstDisplay($1,AstDisplayType::DT_DISPLAY,"",$3,NULL); }
-	|	yD_FDISPLAY '(' idClassSel ',' str commaEListE ')' 	{ $$ = new AstDisplay($1,AstDisplayType::DT_DISPLAY,*$5,$3,$6); }
-	|	yD_FWRITE   '(' idClassSel ',' str commaEListE ')'	{ $$ = new AstDisplay($1,AstDisplayType::DT_WRITE,  *$5,$3,$6); }
+	|	yD_FDISPLAY '(' expr ')'			 	{ $$ = new AstDisplay($1,AstDisplayType::DT_DISPLAY,"",$3,NULL); }
+	|	yD_FDISPLAY '(' expr ',' str commaEListE ')' 		{ $$ = new AstDisplay($1,AstDisplayType::DT_DISPLAY,*$5,$3,$6); }
+	|	yD_FWRITE   '(' expr ',' str commaEListE ')'		{ $$ = new AstDisplay($1,AstDisplayType::DT_WRITE,  *$5,$3,$6); }
 	|	yD_INFO	    parenE					{ $$ = new AstDisplay($1,AstDisplayType::DT_INFO,   "", NULL,NULL); }
 	|	yD_INFO	    '(' str commaEListE ')'			{ $$ = new AstDisplay($1,AstDisplayType::DT_INFO,   *$3,NULL,$4); }
 	|	yD_WARNING  parenE					{ $$ = new AstDisplay($1,AstDisplayType::DT_WARNING,"", NULL,NULL); }
